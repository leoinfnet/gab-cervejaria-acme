name: deploy1.yml
on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install JAVA
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: temurin
          cache: maven
      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.2
      - name: BUILD JAR
        run: mvn -B -q -DskipTests package
      - name: Package artifact
        run: |
          VERSION="${GITHUB_SHA::8}-$(date +%Y%m%d%H%M%S)"
          mkdir -p bundle && cp target/*.jar bundle/app.jar
          echo "$VERSION" > bundle/version.txt
          tar czf bundle-${VERSION}.tgz -C bundle .
      - name: ADD SSH KEY
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Copy to EC2
        run: |
          PORT="${{ secrets.EC2_SSH_PORT || 22 }}"
          scp -o StrictHostKeyChecking=no -P "$PORT" bundle-*.tgz \
            ec2-user@ec2-44-245-179-63.us-west-2.compute.amazonaws.com:/tmp/

      - name: Deploy on EC2 (atomic symlink + restart)
        run: |
      - name: Deploy on EC2 (atomic symlink + restart)
        run: |
          set -euo pipefail
          VERSION="$(cat bundle/version.txt)"
          PORT="${{ secrets.EC2_SSH_PORT || 22 }}"
          USER=ec2-user
          HOST=ec2-44-245-179-63.us-west-2.compute.amazonaws.com
          
          # (Opcional) teste rápido de SSH
          ssh -o StrictHostKeyChecking=no -p "$PORT" "$USER@$HOST" "echo conectado; uname -a"
          
          # Passa VERSION para o remoto e roda o script lá
          ssh -o StrictHostKeyChecking=no -p "$PORT" "$USER@$HOST" \
            "VERSION='$VERSION' bash -lc '
              set -euo pipefail
              SERVICE=cervejaria
              APP_DIR=/opt/app
              REL_DIR=\$APP_DIR/releases/\$VERSION
              TARBALL=/tmp/bundle-\$VERSION.tgz
          
              # sanity check
              [ -f \"\$TARBALL\" ] || { echo \"ERRO: pacote não existe: \$TARBALL\" >&2; exit 2; }
          
              sudo mkdir -p \"\$REL_DIR\"
              sudo tar xzf \"\$TARBALL\" -C \"\$REL_DIR\"
          
              sudo ln -sfn \"\$REL_DIR\" \"\$APP_DIR/current\"
              sudo ln -sfn \"\$REL_DIR/app.jar\" \"\$APP_DIR/current/app.jar\"
          
              sudo systemctl daemon-reload
              sudo systemctl restart \"\$SERVICE\"
            '"
      - name: Health check (HTTP 200 em /)
        run: |
          set -euo pipefail
          PORT="${{ secrets.EC2_SSH_PORT || 22 }}"
          USER=ec2-user
          HOST=ec2-44-245-179-63.us-west-2.compute.amazonaws.com

          ssh -o StrictHostKeyChecking=no -p "$PORT" "$USER@$HOST" bash -lc '
            for i in {1..15}; do
              CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 1 http://localhost:8080/login)
              if [ "$CODE" = "200" ]; then
                echo "Health OK (HTTP 200) em ${i}s"
                exit 0
              fi
              sleep 1
            done
            echo "Healthcheck falhou: não recebeu 200 em 15s" >&2
            exit 1
          '