name: deploy2.yml
on:
  pull_request:
    branches:
      - prod
    types:
      - closed
#  push:
#    branches:
#      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install JAVA
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: temurin
          cache: maven
      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.2

      - name: Determinar tipo de versão pela label
        id: version-type
        run: |
          echo "Verificando labels do PR..."
          LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels -q ".labels[].name")
          VERSION_TYPE="patch"
          if echo "$LABELS" | grep -q 'version:major'; then VERSION_TYPE="major"; fi
          if echo "$LABELS" | grep -q 'version:minor'; then VERSION_TYPE="minor"; fi
           echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "$VERSION_TYPE"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Calcular Nova versao
        run: |
            set -e
            TYPE=${{ steps.version-type.outputs.version_type }}
            case "$TYPE" in
              major)             mvn -B -q build-helper:parse-version versions:set \
                                -DnewVersion=\${parsedVersion.nextMajorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} \
                                -DprocessAllModules -DgenerateBackupPoms=false     
          
          

#              minor)   mvn -B build-helper:parse-version versions:set -DnewVersion=${parsedVersion.majorVersion}.${parsedVersion.nextMinorVersion}.${parsedVersion.incrementalVersion} ;;
 #             patch) mvn -B build-helper:parse-version versions:set -DnewVersion=${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.nextIncrementalVersion}
            esac
            NEW_VER="$(mvn -q help:evaluate -Dexpression=project.version -DforceStdout)"
            echo "Nova versão: $NEW_VER"
      


#      - name: Bump MAJOR no POM e exportar
#        id: bump
#        run: |
#            set -e
#
#            mvn -B -q build-helper:parse-version versions:set \
#              -DnewVersion=\${parsedVersion.nextMajorVersion}.0.0 \
#              -DprocessAllModules -DgenerateBackupPoms=false
#
#              VER="$(mvn -q help:evaluate -Dexpression=project.version -DforceStdout)"
#              echo "Nova versão: $VER"
#              echo "version=$VER" >> "$GITHUB_OUTPUT"
      - name: BUILD JAR
        run: mvn -B -q -DskipTests package
      - name: Copiar artefato para pasta docker
        run: |
          VERSION="${{ steps.bump.outputs.version }}"
          cp target/cervejaria-acme-$VERSION.jar docker/
      - name: LS
        run: | 
          ls docker/
      - name: Build Docker
        run: |
          cd docker
          docker build . -t leogloriainfnet/cervejaria-acme-ele:${{ steps.bump.outputs.version }}

#      - name: Docker Login (Docker Hub)
#        uses: docker/login-action@v3
#        with:
#          registry: docker.io
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      - name: Push da imagem (tag específica)
#        run: |
#          VERSION="${{ steps.bump.outputs.version }}"
#          docker push leogloriainfnet/cervejaria-acme-ele:${{ steps.bump.outputs.version }}
      - name: Commitar pom.xml com nova versão
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci: bump versão para ${{ steps.bump.outputs.version }}"
          file_pattern: pom.xml
          branch: main

#      - name: ADD SSH KEY
#        uses: webfactory/ssh-agent@v0.9.0
#        with:
#          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
#      - name: Deploy on EC2 (run.sh)
#        run: |
#            set -euo pipefail
#
#            PORT="${{ secrets.EC2_SSH_PORT || 22 }}"
#            USER=ec2-user
#            HOST=ec2-44-245-179-63.us-west-2.compute.amazonaws.com
#
#            echo "Conectando no $HOST e rodando run.sh"
#
#            ssh -o StrictHostKeyChecking=no -p "$PORT" "$USER@$HOST" "echo conectado; uname -a"
#
#            # Executa o script no remoto com a versão injetada
#            ssh -o StrictHostKeyChecking=no -p "$PORT" "$USER@$HOST" \
#              "chmod +x /home/ec2-user/run.sh && /home/ec2-user/run.sh"